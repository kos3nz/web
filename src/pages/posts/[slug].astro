---
import { getCollection, type CollectionEntry } from "astro:content"

import { components } from "@/components/astro/mdx-components.astro"
import DateTime from "@/components/solid/date-time.tsx"
import Tag from "@/components/solid/tag.tsx"
import TocDesktop from "@/components/solid/toc-desktop.tsx"
import TocMobile from "@/components/solid/toc-mobile"
import Layout from "@/layouts/base.astro"
import Main from "@/layouts/main.astro"

import "@/styles/mdx.css"

interface Props {
  entry: CollectionEntry<"posts">
}

type AstroHeading = {
  depth: number
  slug: string
  text: string
}

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const allPosts = await getCollection("posts", ({ data }) => {
    return data.draft !== true
  })

  return allPosts.map((post) => ({
    params: { slug: post.slug },
    props: { entry: post },
  }))
}

// 2. When it's time to render, you can get the entry directly from the prop
const { entry } = Astro.props
const { Content, headings: astroHeadings } = await entry.render()

const headings = (astroHeadings as AstroHeading[]).map((heading) => {
  return {
    depth: heading.depth,
    hash: `#${heading.slug}`,
    text: heading.text.split("#")[1],
  }
})

// const imageSrc = createCloudinaryImageSrc({
//   title: entry.data.title,
//   tags: entry.data.tags,
// })
---

<Layout title={entry.data.title}>
  <TocMobile headings={headings} client:visible />
  <Main>
    <div class="mb-12 space-y-4">
      <h1
        class="text-2xl font-bold leading-[2.5rem] text-heading md:text-3xl md:leading-[2.725rem]"
      >
        {entry.data.title}
      </h1>

      <div class="flex items-center gap-x-3 md:gap-x-6">
        <DateTime dateTime={entry.data.publishedDate} />
        <span class="font-bold text-muted">|</span>
        <div class="flex gap-x-2">
          {
            entry.data.tags.map((tag, i) => (
              <>
                {i !== 0 && <span class="font-bold text-muted">Â·</span>}
                <Tag active>{tag}</Tag>
              </>
            ))
          }
        </div>
      </div>
    </div>
    <div
      class="grid grid-cols-1 md:mt-0 md:grid-cols-3 md:gap-x-0 lg:grid-cols-10 lg:gap-x-6"
    >
      <div class="col-span-1 md:col-span-2 lg:col-span-7">
        <article class="prose prose-invert max-w-none">
          <Content components={components} />
        </article>
      </div>
      <aside
        class="-mt-4 hidden md:col-span-1 md:col-start-3 md:block lg:col-span-3 lg:col-start-8"
      >
        <TocDesktop headings={headings} client:visible />
      </aside>
    </div>
  </Main>
</Layout>
