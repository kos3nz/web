---
import { parse } from 'node-html-parser'

// Get slot component as html string
const rawHtml = await Astro.slots.render('default')

// Parse back to html element
const html = parse(rawHtml)

// Get code block filenames
const codeTitles = Array.from(
  html.querySelectorAll('div[data-rehype-pretty-code-title]'),
).map((elem) => elem.text)

// Get code block elements
const codeBlocks = Array.from(html.querySelectorAll('pre'))

if (codeTitles.length !== codeBlocks.length)
  throw new Error('Each code block needs a title')
---

<div>
  <astro-code data-titles={codeTitles}>
    <div
      class="relative flex overflow-x-auto rounded-t-md bg-[#333547]/70 pt-3"
    >
      {
        codeTitles.map((title, i) => (
          <button
            type="button"
            class:list={[
              'tab',
              'px-3 py-1.5 text-sm text-slate-400 shrink-0 rounded-t-md transition-colors duration-300 hover:text-slate-100',
              i === 0 && 'active',
            ]}
          >
            {title}
          </button>
        ))
      }
      <span
        id="bar"
        class="pointer-events-none absolute bottom-0 left-0 h-[2px] origin-left rounded bg-gradient-to-tr from-indigo-500 to-cyan-500 transition-transform duration-300"
      ></span>
    </div>
    {
      codeBlocks.map((code, i) => (
        <div
          data-title={codeTitles[i]}
          data-code-visible={i === 0 ? 'show' : 'hidden'}
        >
          {code}
        </div>
      ))
    }
  </astro-code>
</div>

<style>
  div[data-code-visible='hidden'] {
    display: none;
  }

  div[data-code-visible='show'] {
    display: block;
  }

  button.active {
    font-weight: 500;
    color: #f2f6fa;
    cursor: default;
    background-color: #222436;
    /* border-bottom: 1.5px solid #06b6d4; */
  }
</style>

<style is:global>
  [data-code-visible] pre {
    border-radius: 0 0 0.375rem 0.375rem;
  }
</style>

<script>
  class AstroCode extends HTMLElement {
    constructor() {
      super()

      const titles = this.dataset.titles?.split(',')
      const tabs = this.querySelectorAll('.tab')
      const codeBlocks = this.querySelectorAll('[data-code-visible]')
      const bar = this.querySelector('#bar') as HTMLSpanElement
      const initialBarStyle = {
        width: tabs[0].getBoundingClientRect().width,
      }
      bar.style.width = `${initialBarStyle.width}px`

      tabs?.forEach((tab, i) => {
        // Do nothing when only one codeblock is provided
        if (!titles || titles.length <= 1) return

        const title = titles[i]

        tab.addEventListener('click', () => {
          tabs.forEach((button) => {
            if (button.textContent?.trim() === title) {
              button.classList.add('active')
            } else {
              button.classList.remove('active')
            }
          })

          codeBlocks.forEach((code) => {
            if (code.getAttribute('data-title') === title) {
              code.setAttribute('data-code-visible', 'show')
            } else {
              code.setAttribute('data-code-visible', 'hidden')
            }
          })

          const x = (tab as HTMLButtonElement).offsetLeft
          const width = tab.getBoundingClientRect().width

          bar.style.transform = `translateX(${x}px) scaleX(${
            width / initialBarStyle.width
          })`
        })
      })
    }
  }

  customElements.define('astro-code', AstroCode)
</script>
